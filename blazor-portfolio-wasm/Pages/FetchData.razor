@page "/weather"
@inject HttpClient Http
@using Newtonsoft.Json
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Globalization

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecast == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p><table>
        <tr>
            <th>
                @forecast
            </th>
        </tr>
    </table></p>
}

@code {
    private string data;
    private WeatherForecast? forecast;

    protected override async Task OnInitializedAsync()
    {
        var weatherUrl = @"https://api.open-meteo.com/v1/forecast?latitude=44.5947&longitude=-68.8532&hourly=temperature_2m,relativehumidity_2m,apparent_temperature,precipitation,weathercode&daily=weathercode,temperature_2m_max,temperature_2m_min,sunrise,sunset,precipitation_sum,precipitation_hours&temperature_unit=fahrenheit&windspeed_unit=mph&precipitation_unit=inch&timezone=America%2FNew_York&past_days=3";

        data = await Http.GetStringAsync(weatherUrl);

        forecast = JsonConvert.DeserializeObject<WeatherForecast>(data);
    }


    // Root myDeserializedClass = JsonSerializer.Deserialize<Root>(myJsonResponse);
    public class Daily
    {
        [JsonPropertyName("time")]
        public List<string> Time;

        [JsonPropertyName("weathercode")]
        public List<double> Weathercode;

        [JsonPropertyName("temperature_2m_max")]
        public List<double> Temperature2mMax;

        [JsonPropertyName("temperature_2m_min")]
        public List<double> Temperature2mMin;

        [JsonPropertyName("sunrise")]
        public List<string> Sunrise;

        [JsonPropertyName("sunset")]
        public List<string> Sunset;

        [JsonPropertyName("precipitation_sum")]
        public List<double> PrecipitationSum;

        [JsonPropertyName("precipitation_hours")]
        public List<int> PrecipitationHours;
    }

    public class DailyUnits
    {
        [JsonPropertyName("time")]
        public string Time;

        [JsonPropertyName("weathercode")]
        public string Weathercode;

        [JsonPropertyName("temperature_2m_max")]
        public string Temperature2mMax;

        [JsonPropertyName("temperature_2m_min")]
        public string Temperature2mMin;

        [JsonPropertyName("sunrise")]
        public string Sunrise;

        [JsonPropertyName("sunset")]
        public string Sunset;

        [JsonPropertyName("precipitation_sum")]
        public string PrecipitationSum;

        [JsonPropertyName("precipitation_hours")]
        public string PrecipitationHours;
    }

    public class Hourly
    {
        [JsonPropertyName("time")]
        public List<DateTime> Time;

        [JsonPropertyName("temperature_2m")]
        public List<int> Temperature2m;

        [JsonPropertyName("relativehumidity_2m")]
        public List<int> Relativehumidity2m;

        [JsonPropertyName("apparent_temperature")]
        public List<int> ApparentTemperature;

        [JsonPropertyName("precipitation")]
        public List<double> Precipitation;

        [JsonPropertyName("weathercode")]
        public List<double> Weathercode;
    }

    public class HourlyUnits
    {
        [JsonPropertyName("time")]
        public string Time;

        [JsonPropertyName("temperature_2m")]
        public string Temperature2m;

        [JsonPropertyName("relativehumidity_2m")]
        public string Relativehumidity2m;

        [JsonPropertyName("apparent_temperature")]
        public string ApparentTemperature;

        [JsonPropertyName("precipitation")]
        public string Precipitation;

        [JsonPropertyName("weathercode")]
        public string Weathercode;
    }

    public class WeatherForecast
    {
        [JsonPropertyName("latitude")]
        public double Latitude;

        [JsonPropertyName("longitude")]
        public double Longitude;

        [JsonPropertyName("generationtime_ms")]
        public decimal GenerationtimeMs;

        [JsonPropertyName("utc_offset_seconds")]
        public int UtcOffsetSeconds;

        [JsonPropertyName("timezone")]
        public string Timezone;

        [JsonPropertyName("timezone_abbreviation")]
        public string TimezoneAbbreviation;

        [JsonPropertyName("elevation")]
        public double Elevation;

        [JsonPropertyName("hourly_units")]
        public HourlyUnits HourlyUnits;

        [JsonPropertyName("hourly")]
        public Hourly Hourly;

        [JsonPropertyName("daily_units")]
        public DailyUnits DailyUnits;

        [JsonPropertyName("daily")]
        public Daily Daily;
    }


}
