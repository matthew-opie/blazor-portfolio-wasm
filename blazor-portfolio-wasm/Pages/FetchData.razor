@page "/weather"
@inject HttpClient Http
@using System.Text.Json;

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecast == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>@data.ToString()</p>
}

@code {
    private JsonElement data;
    private WeatherForecast? forecast;
    private HourlyUnits hourlyUnits;
    private HourlyData hourlyData;

    protected override async Task OnInitializedAsync()
    {
        var weatherUrl = @"https://api.open-meteo.com/v1/forecast?latitude=44.5947&longitude=-68.8532&hourly=temperature_2m,relativehumidity_2m,apparent_temperature,precipitation,weathercode&daily=weathercode,temperature_2m_max,temperature_2m_min,sunrise,sunset,precipitation_sum,precipitation_hours&temperature_unit=fahrenheit&windspeed_unit=mph&precipitation_unit=inch&timezone=America%2FNew_York&past_days=3";

        data = await Http.GetFromJsonAsync<JsonElement>(weatherUrl);

        forecast = new WeatherForecast()
            {
                Latitude = data.GetProperty("latitude").GetDouble(),
                Longitude = data.GetProperty("longitude").GetDouble(),
                GenerationTime = data.GetProperty("generationtime_ms").GetDecimal(),
                UtcOffsetSeconds = data.GetProperty("utc_offset_seconds").GetInt32(),
                TimeZone = data.GetProperty("timezone").GetString(),
                TimeZoneAbbreviation = data.GetProperty("timezone_abbreviation").GetString(),
                Elevation = data.GetProperty("elevation").GetDouble()
            };
    }

    public class WeatherForecast
    {
        public double Latitude;

        public double Longitude;

        public decimal GenerationTime;

        public int UtcOffsetSeconds;

        public string? TimeZone;

        public string? TimeZoneAbbreviation;

        public double Elevation;
    }

    public class HourlyUnits {
        public string? Time;
        public string? Temperature_2m;
        public string? RelativeHumidity_2m;
        public string? Apparent_Temperature;
        public string? Precipitation;
        public string? WeatherCode;
    }
    
    public class HourlyData {
        public string[]? Time;
        public float[]? Temperature_2m;
        public int[]? RelativeHumidity_2m;
        public float[]? Apparent_Temperature;
        public double[]? Precipitation;
        public int[]? WeatherCode;
    }
    
    public class DailyUnits {
        public string? Time;
        public string? WeatherCode;
        public string? Temperature_2m_Max;
        public string? Temperature_2m_Min;
        public string? Sunrise;
        public string? Sunset;
        public string? Precipitation_Sum;
        public string? Precipitation_Hours;
    }
    
    public class DailyData
    {
        public string[]? Time;
        public int[]? WeatherCode;
        public float[]? Temperature_2m_Max;
        public float[]? Temperature_2m_Min;
        public string[]? Sunrise;
        public string[]? Sunset;
        public double[]? Precipitation_Sum;
        public double[]? Precipitation_Hours;
    }
}
